//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: Empty_Response_Dcps.h
//  Source: /home/erle/ros2_ws/build/std_srvs/rosidl_typesupport_opensplice_cpp/std_srvs/srv/dds_opensplice/Empty_Response_Dcps.idl
//  Generated: Sun Nov  8 10:33:58 2015
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _EMPTY_RESPONSE_DCPS_H_
#define _EMPTY_RESPONSE_DCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps.h"
#include "Empty_Response_.h"


namespace std_srvs
{
   namespace srv
   {
      namespace dds_
      {

         class Empty_Response_TypeSupportInterface;

         typedef Empty_Response_TypeSupportInterface * Empty_Response_TypeSupportInterface_ptr;
         typedef DDS_DCPSInterface_var < Empty_Response_TypeSupportInterface> Empty_Response_TypeSupportInterface_var;
         typedef DDS_DCPSInterface_out < Empty_Response_TypeSupportInterface> Empty_Response_TypeSupportInterface_out;


         class Empty_Response_DataWriter;

         typedef Empty_Response_DataWriter * Empty_Response_DataWriter_ptr;
         typedef DDS_DCPSInterface_var < Empty_Response_DataWriter> Empty_Response_DataWriter_var;
         typedef DDS_DCPSInterface_out < Empty_Response_DataWriter> Empty_Response_DataWriter_out;


         class Empty_Response_DataReader;

         typedef Empty_Response_DataReader * Empty_Response_DataReader_ptr;
         typedef DDS_DCPSInterface_var < Empty_Response_DataReader> Empty_Response_DataReader_var;
         typedef DDS_DCPSInterface_out < Empty_Response_DataReader> Empty_Response_DataReader_out;


         class Empty_Response_DataReaderView;

         typedef Empty_Response_DataReaderView * Empty_Response_DataReaderView_ptr;
         typedef DDS_DCPSInterface_var < Empty_Response_DataReaderView> Empty_Response_DataReaderView_var;
         typedef DDS_DCPSInterface_out < Empty_Response_DataReaderView> Empty_Response_DataReaderView_out;

         struct Empty_Response_Seq_uniq_ {};
         typedef DDS_DCPSUFLSeq < Empty_Response_, struct Empty_Response_Seq_uniq_> Empty_Response_Seq;
         typedef DDS_DCPSSequence_var < Empty_Response_Seq> Empty_Response_Seq_var;
         typedef DDS_DCPSSequence_out < Empty_Response_Seq> Empty_Response_Seq_out;
         class Empty_Response_TypeSupportInterface
         :
            virtual public DDS::TypeSupport
         { 
         public:
            typedef Empty_Response_TypeSupportInterface_ptr _ptr_type;
            typedef Empty_Response_TypeSupportInterface_var _var_type;

            static Empty_Response_TypeSupportInterface_ptr _duplicate (Empty_Response_TypeSupportInterface_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static Empty_Response_TypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
            static Empty_Response_TypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static Empty_Response_TypeSupportInterface_ptr _nil () { return 0; }
            static const char * _local_id;
            Empty_Response_TypeSupportInterface_ptr _this () { return this; }


         protected:
            Empty_Response_TypeSupportInterface () {};
            ~Empty_Response_TypeSupportInterface () {};
         private:
            Empty_Response_TypeSupportInterface (const Empty_Response_TypeSupportInterface &);
            Empty_Response_TypeSupportInterface & operator = (const Empty_Response_TypeSupportInterface &);
         };

         class Empty_Response_DataWriter
         :
            virtual public DDS::DataWriter
         { 
         public:
            typedef Empty_Response_DataWriter_ptr _ptr_type;
            typedef Empty_Response_DataWriter_var _var_type;

            static Empty_Response_DataWriter_ptr _duplicate (Empty_Response_DataWriter_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static Empty_Response_DataWriter_ptr _narrow (DDS::Object_ptr obj);
            static Empty_Response_DataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static Empty_Response_DataWriter_ptr _nil () { return 0; }
            static const char * _local_id;
            Empty_Response_DataWriter_ptr _this () { return this; }

            virtual DDS::LongLong register_instance (const Empty_Response_& instance_data) = 0;
            virtual DDS::LongLong register_instance_w_timestamp (const Empty_Response_& instance_data, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long unregister_instance (const Empty_Response_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long unregister_instance_w_timestamp (const Empty_Response_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long write (const Empty_Response_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long write_w_timestamp (const Empty_Response_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long dispose (const Empty_Response_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long dispose_w_timestamp (const Empty_Response_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long writedispose (const Empty_Response_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long writedispose_w_timestamp (const Empty_Response_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long get_key_value (Empty_Response_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const Empty_Response_& instance_data) = 0;

         protected:
            Empty_Response_DataWriter () {};
            ~Empty_Response_DataWriter () {};
         private:
            Empty_Response_DataWriter (const Empty_Response_DataWriter &);
            Empty_Response_DataWriter & operator = (const Empty_Response_DataWriter &);
         };

         class Empty_Response_DataReader
         :
            virtual public DDS::DataReader
         { 
         public:
            typedef Empty_Response_DataReader_ptr _ptr_type;
            typedef Empty_Response_DataReader_var _var_type;

            static Empty_Response_DataReader_ptr _duplicate (Empty_Response_DataReader_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static Empty_Response_DataReader_ptr _narrow (DDS::Object_ptr obj);
            static Empty_Response_DataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static Empty_Response_DataReader_ptr _nil () { return 0; }
            static const char * _local_id;
            Empty_Response_DataReader_ptr _this () { return this; }

            virtual DDS::Long read (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_w_condition (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_w_condition (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long read_next_sample (Empty_Response_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long take_next_sample (Empty_Response_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long read_instance (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_instance (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_next_instance (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance_w_condition (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_next_instance_w_condition (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long return_loan (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
            virtual DDS::Long get_key_value (Empty_Response_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const Empty_Response_& instance) = 0;

         protected:
            Empty_Response_DataReader () {};
            ~Empty_Response_DataReader () {};
         private:
            Empty_Response_DataReader (const Empty_Response_DataReader &);
            Empty_Response_DataReader & operator = (const Empty_Response_DataReader &);
         };

         class Empty_Response_DataReaderView
         :
            virtual public DDS::DataReaderView
         { 
         public:
            typedef Empty_Response_DataReaderView_ptr _ptr_type;
            typedef Empty_Response_DataReaderView_var _var_type;

            static Empty_Response_DataReaderView_ptr _duplicate (Empty_Response_DataReaderView_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static Empty_Response_DataReaderView_ptr _narrow (DDS::Object_ptr obj);
            static Empty_Response_DataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static Empty_Response_DataReaderView_ptr _nil () { return 0; }
            static const char * _local_id;
            Empty_Response_DataReaderView_ptr _this () { return this; }

            virtual DDS::Long read (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_w_condition (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_w_condition (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long read_next_sample (Empty_Response_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long take_next_sample (Empty_Response_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long read_instance (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_instance (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_next_instance (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance_w_condition (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_next_instance_w_condition (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long return_loan (Empty_Response_Seq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
            virtual DDS::Long get_key_value (Empty_Response_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const Empty_Response_& instance) = 0;

         protected:
            Empty_Response_DataReaderView () {};
            ~Empty_Response_DataReaderView () {};
         private:
            Empty_Response_DataReaderView (const Empty_Response_DataReaderView &);
            Empty_Response_DataReaderView & operator = (const Empty_Response_DataReaderView &);
         };

      }
   }
}




#endif 
