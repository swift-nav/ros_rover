//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: LargeFixed_Dcps.h
//  Source: /home/erle/ros2_ws/build/example_interfaces/rosidl_typesupport_opensplice_cpp/example_interfaces/msg/dds_opensplice/LargeFixed_Dcps.idl
//  Generated: Sat Nov  7 22:57:00 2015
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _LARGEFIXED_DCPS_H_
#define _LARGEFIXED_DCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "LargeFixed_.h"
#include "dds_dcps.h"


namespace example_interfaces
{
   namespace msg
   {
      namespace dds_
      {

         class LargeFixed_TypeSupportInterface;

         typedef LargeFixed_TypeSupportInterface * LargeFixed_TypeSupportInterface_ptr;
         typedef DDS_DCPSInterface_var < LargeFixed_TypeSupportInterface> LargeFixed_TypeSupportInterface_var;
         typedef DDS_DCPSInterface_out < LargeFixed_TypeSupportInterface> LargeFixed_TypeSupportInterface_out;


         class LargeFixed_DataWriter;

         typedef LargeFixed_DataWriter * LargeFixed_DataWriter_ptr;
         typedef DDS_DCPSInterface_var < LargeFixed_DataWriter> LargeFixed_DataWriter_var;
         typedef DDS_DCPSInterface_out < LargeFixed_DataWriter> LargeFixed_DataWriter_out;


         class LargeFixed_DataReader;

         typedef LargeFixed_DataReader * LargeFixed_DataReader_ptr;
         typedef DDS_DCPSInterface_var < LargeFixed_DataReader> LargeFixed_DataReader_var;
         typedef DDS_DCPSInterface_out < LargeFixed_DataReader> LargeFixed_DataReader_out;


         class LargeFixed_DataReaderView;

         typedef LargeFixed_DataReaderView * LargeFixed_DataReaderView_ptr;
         typedef DDS_DCPSInterface_var < LargeFixed_DataReaderView> LargeFixed_DataReaderView_var;
         typedef DDS_DCPSInterface_out < LargeFixed_DataReaderView> LargeFixed_DataReaderView_out;

         struct LargeFixed_Seq_uniq_ {};
         typedef DDS_DCPSUFLSeq < LargeFixed_, struct LargeFixed_Seq_uniq_> LargeFixed_Seq;
         typedef DDS_DCPSSequence_var < LargeFixed_Seq> LargeFixed_Seq_var;
         typedef DDS_DCPSSequence_out < LargeFixed_Seq> LargeFixed_Seq_out;
         class LargeFixed_TypeSupportInterface
         :
            virtual public DDS::TypeSupport
         { 
         public:
            typedef LargeFixed_TypeSupportInterface_ptr _ptr_type;
            typedef LargeFixed_TypeSupportInterface_var _var_type;

            static LargeFixed_TypeSupportInterface_ptr _duplicate (LargeFixed_TypeSupportInterface_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static LargeFixed_TypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
            static LargeFixed_TypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static LargeFixed_TypeSupportInterface_ptr _nil () { return 0; }
            static const char * _local_id;
            LargeFixed_TypeSupportInterface_ptr _this () { return this; }


         protected:
            LargeFixed_TypeSupportInterface () {};
            ~LargeFixed_TypeSupportInterface () {};
         private:
            LargeFixed_TypeSupportInterface (const LargeFixed_TypeSupportInterface &);
            LargeFixed_TypeSupportInterface & operator = (const LargeFixed_TypeSupportInterface &);
         };

         class LargeFixed_DataWriter
         :
            virtual public DDS::DataWriter
         { 
         public:
            typedef LargeFixed_DataWriter_ptr _ptr_type;
            typedef LargeFixed_DataWriter_var _var_type;

            static LargeFixed_DataWriter_ptr _duplicate (LargeFixed_DataWriter_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static LargeFixed_DataWriter_ptr _narrow (DDS::Object_ptr obj);
            static LargeFixed_DataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static LargeFixed_DataWriter_ptr _nil () { return 0; }
            static const char * _local_id;
            LargeFixed_DataWriter_ptr _this () { return this; }

            virtual DDS::LongLong register_instance (const LargeFixed_& instance_data) = 0;
            virtual DDS::LongLong register_instance_w_timestamp (const LargeFixed_& instance_data, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long unregister_instance (const LargeFixed_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long unregister_instance_w_timestamp (const LargeFixed_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long write (const LargeFixed_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long write_w_timestamp (const LargeFixed_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long dispose (const LargeFixed_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long dispose_w_timestamp (const LargeFixed_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long writedispose (const LargeFixed_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long writedispose_w_timestamp (const LargeFixed_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long get_key_value (LargeFixed_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const LargeFixed_& instance_data) = 0;

         protected:
            LargeFixed_DataWriter () {};
            ~LargeFixed_DataWriter () {};
         private:
            LargeFixed_DataWriter (const LargeFixed_DataWriter &);
            LargeFixed_DataWriter & operator = (const LargeFixed_DataWriter &);
         };

         class LargeFixed_DataReader
         :
            virtual public DDS::DataReader
         { 
         public:
            typedef LargeFixed_DataReader_ptr _ptr_type;
            typedef LargeFixed_DataReader_var _var_type;

            static LargeFixed_DataReader_ptr _duplicate (LargeFixed_DataReader_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static LargeFixed_DataReader_ptr _narrow (DDS::Object_ptr obj);
            static LargeFixed_DataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static LargeFixed_DataReader_ptr _nil () { return 0; }
            static const char * _local_id;
            LargeFixed_DataReader_ptr _this () { return this; }

            virtual DDS::Long read (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_w_condition (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_w_condition (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long read_next_sample (LargeFixed_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long take_next_sample (LargeFixed_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long read_instance (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_instance (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_next_instance (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance_w_condition (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_next_instance_w_condition (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long return_loan (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
            virtual DDS::Long get_key_value (LargeFixed_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const LargeFixed_& instance) = 0;

         protected:
            LargeFixed_DataReader () {};
            ~LargeFixed_DataReader () {};
         private:
            LargeFixed_DataReader (const LargeFixed_DataReader &);
            LargeFixed_DataReader & operator = (const LargeFixed_DataReader &);
         };

         class LargeFixed_DataReaderView
         :
            virtual public DDS::DataReaderView
         { 
         public:
            typedef LargeFixed_DataReaderView_ptr _ptr_type;
            typedef LargeFixed_DataReaderView_var _var_type;

            static LargeFixed_DataReaderView_ptr _duplicate (LargeFixed_DataReaderView_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static LargeFixed_DataReaderView_ptr _narrow (DDS::Object_ptr obj);
            static LargeFixed_DataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static LargeFixed_DataReaderView_ptr _nil () { return 0; }
            static const char * _local_id;
            LargeFixed_DataReaderView_ptr _this () { return this; }

            virtual DDS::Long read (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_w_condition (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_w_condition (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long read_next_sample (LargeFixed_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long take_next_sample (LargeFixed_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long read_instance (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_instance (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_next_instance (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance_w_condition (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_next_instance_w_condition (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long return_loan (LargeFixed_Seq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
            virtual DDS::Long get_key_value (LargeFixed_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const LargeFixed_& instance) = 0;

         protected:
            LargeFixed_DataReaderView () {};
            ~LargeFixed_DataReaderView () {};
         private:
            LargeFixed_DataReaderView (const LargeFixed_DataReaderView &);
            LargeFixed_DataReaderView & operator = (const LargeFixed_DataReaderView &);
         };

      }
   }
}




#endif 
