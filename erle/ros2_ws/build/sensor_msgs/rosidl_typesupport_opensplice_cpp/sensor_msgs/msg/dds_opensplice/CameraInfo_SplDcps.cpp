#include "CameraInfo_SplDcps.h"
#include "ccpp_CameraInfo_.h"
#include "dds_type_aliases.h"

const char *
__sensor_msgs_msg_dds__CameraInfo___name(void)
{
    return (const char*)"sensor_msgs::msg::dds_::CameraInfo_";
}

const char *
__sensor_msgs_msg_dds__CameraInfo___keys(void)
{
    return (const char*)"";
}

#include <v_kernel.h>
#include <v_topic.h>
#include <os_stdlib.h>
#include <string.h>
#include <os_report.h>

c_bool
__sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9__copyIn(
    c_base base,
    ::sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9 *from,
    _sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9 *to)
{
    c_bool result = OS_C_TRUE;
    (void) base;

    memcpy (to, *from, sizeof (*to));
    return result;
}

c_bool
__sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_12__copyIn(
    c_base base,
    ::sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12 *from,
    _sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_12 *to)
{
    c_bool result = OS_C_TRUE;
    (void) base;

    memcpy (to, *from, sizeof (*to));
    return result;
}

c_bool
__sensor_msgs_msg_dds__CameraInfo___copyIn(
    c_base base,
    struct ::sensor_msgs::msg::dds_::CameraInfo_ *from,
    struct _sensor_msgs_msg_dds__CameraInfo_ *to)
{
    c_bool result = OS_C_TRUE;
    (void) base;

    if(result){
        extern c_bool __std_msgs_msg_dds__Header___copyIn(c_base, ::std_msgs::msg::dds_::Header_ *, _std_msgs_msg_dds__Header_ *);
        result = __std_msgs_msg_dds__Header___copyIn(base, &from->header_, &to->header_);
    }
    to->height_ = (c_ulong)from->height_;
    to->width_ = (c_ulong)from->width_;
#ifdef OSPL_BOUNDS_CHECK
    if(from->distortion_model_){
        to->distortion_model_ = c_stringNew(base, from->distortion_model_);
    } else {
        OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'sensor_msgs::msg::dds_::CameraInfo_.distortion_model_' of type 'c_string' is NULL.");
        result = OS_C_FALSE;
    }
#else
    to->distortion_model_ = c_stringNew(base, from->distortion_model_);
#endif
    {
/* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 774 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        c_double *dest0;
        ::sensor_msgs::msg::dds_::CameraInfo_::_d__seq *src = &from->d_;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_double"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_double>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (c_double *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1873 */
                    c_double *buf0;
            buf0 = (c_double *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
        }
        to->d_ = (c_sequence)dest0;
#else
        dest0 = (c_double *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1873 */
                    c_double *buf0;
            buf0 = (c_double *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
        }
        to->d_ = (c_sequence)dest0;
#endif
    }
    if(result){
        extern c_bool __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9__copyIn(c_base, ::sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9 *, _sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9 *);
        result = __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9__copyIn(base, &from->k_, &to->k_);
    }
    if(result){
        extern c_bool __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9__copyIn(c_base, ::sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9 *, _sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9 *);
        result = __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9__copyIn(base, &from->r_, &to->r_);
    }
    if(result){
        extern c_bool __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_12__copyIn(c_base, ::sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12 *, _sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_12 *);
        result = __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_12__copyIn(base, &from->p_, &to->p_);
    }
    to->binning_x_ = (c_ulong)from->binning_x_;
    to->binning_y_ = (c_ulong)from->binning_y_;
    if(result){
        extern c_bool __sensor_msgs_msg_dds__RegionOfInterest___copyIn(c_base, ::sensor_msgs::msg::dds_::RegionOfInterest_ *, _sensor_msgs_msg_dds__RegionOfInterest_ *);
        result = __sensor_msgs_msg_dds__RegionOfInterest___copyIn(base, &from->roi_, &to->roi_);
    }
    return result;
}

void
__sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9__copyOut(
    void *_from,
    void *_to)
{
    _sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9 *from = (_sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9 *)_from;
    ::sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9 *to = (::sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9 *)_to;
    memcpy (*to, from, sizeof (*from));
}

void
__sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_12__copyOut(
    void *_from,
    void *_to)
{
    _sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_12 *from = (_sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_12 *)_from;
    ::sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12 *to = (::sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12 *)_to;
    memcpy (*to, from, sizeof (*from));
}

void
__sensor_msgs_msg_dds__CameraInfo___copyOut(
    void *_from,
    void *_to)
{
    struct _sensor_msgs_msg_dds__CameraInfo_ *from = (struct _sensor_msgs_msg_dds__CameraInfo_ *)_from;
    struct ::sensor_msgs::msg::dds_::CameraInfo_ *to = (struct ::sensor_msgs::msg::dds_::CameraInfo_ *)_to;
    {
        extern void __std_msgs_msg_dds__Header___copyOut(void *, void *);
        __std_msgs_msg_dds__Header___copyOut((void *)&from->header_, (void *)&to->header_);
    }
    to->height_ = (::DDS::ULong)from->height_;
    to->width_ = (::DDS::ULong)from->width_;
    to->distortion_model_ = DDS::string_dup(from->distortion_model_ ? from->distortion_model_ : "");
    {
        long size0;
        c_double *src0 = (c_double *)from->d_;
        ::sensor_msgs::msg::dds_::CameraInfo_::_d__seq *dst = &to->d_;

        size0 = c_arraySize(c_sequence(from->d_));
        to->d_.length(size0);
        {
            c_double *buf0;
            buf0 = (c_double *)(*dst).get_buffer();
            memcpy (buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        extern void __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9__copyOut(void *, void *);
        __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9__copyOut((void *)&from->k_, (void *)&to->k_);
    }
    {
        extern void __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9__copyOut(void *, void *);
        __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_9__copyOut((void *)&from->r_, (void *)&to->r_);
    }
    {
        extern void __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_12__copyOut(void *, void *);
        __sensor_msgs_msg_dds__sensor_msgs__CameraInfo__double_array_12__copyOut((void *)&from->p_, (void *)&to->p_);
    }
    to->binning_x_ = (::DDS::ULong)from->binning_x_;
    to->binning_y_ = (::DDS::ULong)from->binning_y_;
    {
        extern void __sensor_msgs_msg_dds__RegionOfInterest___copyOut(void *, void *);
        __sensor_msgs_msg_dds__RegionOfInterest___copyOut((void *)&from->roi_, (void *)&to->roi_);
    }
}

