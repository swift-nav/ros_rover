#include "MultiDOFJointState_SplDcps.h"
#include "ccpp_MultiDOFJointState_.h"
#include "dds_type_aliases.h"

const char *
__sensor_msgs_msg_dds__MultiDOFJointState___name(void)
{
    return (const char*)"sensor_msgs::msg::dds_::MultiDOFJointState_";
}

const char *
__sensor_msgs_msg_dds__MultiDOFJointState___keys(void)
{
    return (const char*)"";
}

#include <v_kernel.h>
#include <v_topic.h>
#include <os_stdlib.h>
#include <string.h>
#include <os_report.h>

c_bool
__sensor_msgs_msg_dds__MultiDOFJointState___copyIn(
    c_base base,
    struct ::sensor_msgs::msg::dds_::MultiDOFJointState_ *from,
    struct _sensor_msgs_msg_dds__MultiDOFJointState_ *to)
{
    c_bool result = OS_C_TRUE;
    (void) base;

    if(result){
        extern c_bool __std_msgs_msg_dds__Header___copyIn(c_base, ::std_msgs::msg::dds_::Header_ *, _std_msgs_msg_dds__Header_ *);
        result = __std_msgs_msg_dds__Header___copyIn(base, &from->header_, &to->header_);
    }
    {
/* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 774 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        c_string *dest0;
        ::sensor_msgs::msg::dds_::MultiDOFJointState_::_joint_names__seq *src = &from->joint_names_;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_string"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_string>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (c_string *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
#ifdef OSPL_BOUNDS_CHECK
                if((*src)[i0]){
                    dest0[i0] = c_stringNew(base, (*src)[i0]);
                } else {
                    OS_REPORT (OS_ERROR, "copyIn", 0,"Element of 'sensor_msgs::msg::dds_::MultiDOFJointState_.*src' of type 'c_string' is NULL.");
                    result = OS_C_FALSE;
                }
#else
                dest0[i0] = c_stringNew(base, (*src)[i0]);
#endif
            }
        }
        to->joint_names_ = (c_sequence)dest0;
#else
        dest0 = (c_string *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
#ifdef OSPL_BOUNDS_CHECK
                if((*src)[i0]){
                    dest0[i0] = c_stringNew(base, (*src)[i0]);
                } else {
                    OS_REPORT (OS_ERROR, "copyIn", 0,"Element of 'sensor_msgs::msg::dds_::MultiDOFJointState_.*src' of type 'c_string' is NULL.");
                    result = OS_C_FALSE;
                }
#else
                dest0[i0] = c_stringNew(base, (*src)[i0]);
#endif
            }
        }
        to->joint_names_ = (c_sequence)dest0;
#endif
    }
    {
/* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 774 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        struct _geometry_msgs_msg_dds__Transform_ *dest0;
        ::sensor_msgs::msg::dds_::MultiDOFJointState_::_transforms__seq *src = &from->transforms_;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "geometry_msgs::msg::dds_::Transform_"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<geometry_msgs::msg::dds_::Transform_>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (struct _geometry_msgs_msg_dds__Transform_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1873 */
                    struct _geometry_msgs_msg_dds__Transform_ *buf0;
            buf0 = (struct _geometry_msgs_msg_dds__Transform_ *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
        }
        to->transforms_ = (c_sequence)dest0;
#else
        dest0 = (struct _geometry_msgs_msg_dds__Transform_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1873 */
                    struct _geometry_msgs_msg_dds__Transform_ *buf0;
            buf0 = (struct _geometry_msgs_msg_dds__Transform_ *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
        }
        to->transforms_ = (c_sequence)dest0;
#endif
    }
    {
/* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 774 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        struct _geometry_msgs_msg_dds__Twist_ *dest0;
        ::sensor_msgs::msg::dds_::MultiDOFJointState_::_twist__seq *src = &from->twist_;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "geometry_msgs::msg::dds_::Twist_"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<geometry_msgs::msg::dds_::Twist_>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (struct _geometry_msgs_msg_dds__Twist_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1873 */
                    struct _geometry_msgs_msg_dds__Twist_ *buf0;
            buf0 = (struct _geometry_msgs_msg_dds__Twist_ *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
        }
        to->twist_ = (c_sequence)dest0;
#else
        dest0 = (struct _geometry_msgs_msg_dds__Twist_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1873 */
                    struct _geometry_msgs_msg_dds__Twist_ *buf0;
            buf0 = (struct _geometry_msgs_msg_dds__Twist_ *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
        }
        to->twist_ = (c_sequence)dest0;
#endif
    }
    {
/* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 774 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        struct _geometry_msgs_msg_dds__Wrench_ *dest0;
        ::sensor_msgs::msg::dds_::MultiDOFJointState_::_wrench__seq *src = &from->wrench_;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "geometry_msgs::msg::dds_::Wrench_"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<geometry_msgs::msg::dds_::Wrench_>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (struct _geometry_msgs_msg_dds__Wrench_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1873 */
                    struct _geometry_msgs_msg_dds__Wrench_ *buf0;
            buf0 = (struct _geometry_msgs_msg_dds__Wrench_ *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
        }
        to->wrench_ = (c_sequence)dest0;
#else
        dest0 = (struct _geometry_msgs_msg_dds__Wrench_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1873 */
                    struct _geometry_msgs_msg_dds__Wrench_ *buf0;
            buf0 = (struct _geometry_msgs_msg_dds__Wrench_ *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
        }
        to->wrench_ = (c_sequence)dest0;
#endif
    }
    return result;
}

void
__sensor_msgs_msg_dds__MultiDOFJointState___copyOut(
    void *_from,
    void *_to)
{
    struct _sensor_msgs_msg_dds__MultiDOFJointState_ *from = (struct _sensor_msgs_msg_dds__MultiDOFJointState_ *)_from;
    struct ::sensor_msgs::msg::dds_::MultiDOFJointState_ *to = (struct ::sensor_msgs::msg::dds_::MultiDOFJointState_ *)_to;
    {
        extern void __std_msgs_msg_dds__Header___copyOut(void *, void *);
        __std_msgs_msg_dds__Header___copyOut((void *)&from->header_, (void *)&to->header_);
    }
    {
        long size0;
        c_string *src0 = (c_string *)from->joint_names_;
        ::sensor_msgs::msg::dds_::MultiDOFJointState_::_joint_names__seq *dst = &to->joint_names_;

        size0 = c_arraySize(c_sequence(from->joint_names_));
        to->joint_names_.length(size0);
        {
            long i0;
            for (i0 = 0; i0 < size0; i0++) {
                (*dst)[i0] = DDS::string_dup(src0[i0]);
            }
        }
    }
    {
        long size0;
        struct _geometry_msgs_msg_dds__Transform_ *src0 = (struct _geometry_msgs_msg_dds__Transform_ *)from->transforms_;
        ::sensor_msgs::msg::dds_::MultiDOFJointState_::_transforms__seq *dst = &to->transforms_;

        size0 = c_arraySize(c_sequence(from->transforms_));
        to->transforms_.length(size0);
        {
            struct _geometry_msgs_msg_dds__Transform_ *buf0;
            buf0 = (struct _geometry_msgs_msg_dds__Transform_ *)(*dst).get_buffer();
            memcpy (buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        struct _geometry_msgs_msg_dds__Twist_ *src0 = (struct _geometry_msgs_msg_dds__Twist_ *)from->twist_;
        ::sensor_msgs::msg::dds_::MultiDOFJointState_::_twist__seq *dst = &to->twist_;

        size0 = c_arraySize(c_sequence(from->twist_));
        to->twist_.length(size0);
        {
            struct _geometry_msgs_msg_dds__Twist_ *buf0;
            buf0 = (struct _geometry_msgs_msg_dds__Twist_ *)(*dst).get_buffer();
            memcpy (buf0,src0,size0* sizeof(*buf0));
        }
    }
    {
        long size0;
        struct _geometry_msgs_msg_dds__Wrench_ *src0 = (struct _geometry_msgs_msg_dds__Wrench_ *)from->wrench_;
        ::sensor_msgs::msg::dds_::MultiDOFJointState_::_wrench__seq *dst = &to->wrench_;

        size0 = c_arraySize(c_sequence(from->wrench_));
        to->wrench_.length(size0);
        {
            struct _geometry_msgs_msg_dds__Wrench_ *buf0;
            buf0 = (struct _geometry_msgs_msg_dds__Wrench_ *)(*dst).get_buffer();
            memcpy (buf0,src0,size0* sizeof(*buf0));
        }
    }
}

