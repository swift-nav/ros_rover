#include "MultiEchoLaserScan_SplDcps.h"
#include "ccpp_MultiEchoLaserScan_.h"
#include "dds_type_aliases.h"

const char *
__sensor_msgs_msg_dds__MultiEchoLaserScan___name(void)
{
    return (const char*)"sensor_msgs::msg::dds_::MultiEchoLaserScan_";
}

const char *
__sensor_msgs_msg_dds__MultiEchoLaserScan___keys(void)
{
    return (const char*)"";
}

#include <v_kernel.h>
#include <v_topic.h>
#include <os_stdlib.h>
#include <string.h>
#include <os_report.h>

c_bool
__sensor_msgs_msg_dds__MultiEchoLaserScan___copyIn(
    c_base base,
    struct ::sensor_msgs::msg::dds_::MultiEchoLaserScan_ *from,
    struct _sensor_msgs_msg_dds__MultiEchoLaserScan_ *to)
{
    c_bool result = OS_C_TRUE;
    (void) base;

    if(result){
        extern c_bool __std_msgs_msg_dds__Header___copyIn(c_base, ::std_msgs::msg::dds_::Header_ *, _std_msgs_msg_dds__Header_ *);
        result = __std_msgs_msg_dds__Header___copyIn(base, &from->header_, &to->header_);
    }
    to->angle_min_ = (c_float)from->angle_min_;
    to->angle_max_ = (c_float)from->angle_max_;
    to->angle_increment_ = (c_float)from->angle_increment_;
    to->time_increment_ = (c_float)from->time_increment_;
    to->scan_time_ = (c_float)from->scan_time_;
    to->range_min_ = (c_float)from->range_min_;
    to->range_max_ = (c_float)from->range_max_;
    {
/* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 774 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        struct _sensor_msgs_msg_dds__LaserEcho_ *dest0;
        ::sensor_msgs::msg::dds_::MultiEchoLaserScan_::_ranges__seq *src = &from->ranges_;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "sensor_msgs::msg::dds_::LaserEcho_"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<sensor_msgs::msg::dds_::LaserEcho_>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (struct _sensor_msgs_msg_dds__LaserEcho_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
                extern c_bool __sensor_msgs_msg_dds__LaserEcho___copyIn(c_base base,
                    sensor_msgs::msg::dds_::LaserEcho_ *From,
                    struct _sensor_msgs_msg_dds__LaserEcho_ *To);

                result = __sensor_msgs_msg_dds__LaserEcho___copyIn(base, &(*src)[i0], (struct _sensor_msgs_msg_dds__LaserEcho_ *)&dest0[i0]);
            }
        }
        to->ranges_ = (c_sequence)dest0;
#else
        dest0 = (struct _sensor_msgs_msg_dds__LaserEcho_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
                extern c_bool __sensor_msgs_msg_dds__LaserEcho___copyIn(c_base base,
                    sensor_msgs::msg::dds_::LaserEcho_ *From,
                    struct _sensor_msgs_msg_dds__LaserEcho_ *To);

                result = __sensor_msgs_msg_dds__LaserEcho___copyIn(base, &(*src)[i0], (struct _sensor_msgs_msg_dds__LaserEcho_ *)&dest0[i0]);
            }
        }
        to->ranges_ = (c_sequence)dest0;
#endif
    }
    {
/* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 774 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        struct _sensor_msgs_msg_dds__LaserEcho_ *dest0;
        ::sensor_msgs::msg::dds_::MultiEchoLaserScan_::_intensities__seq *src = &from->intensities_;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "sensor_msgs::msg::dds_::LaserEcho_"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<sensor_msgs::msg::dds_::LaserEcho_>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (struct _sensor_msgs_msg_dds__LaserEcho_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
                extern c_bool __sensor_msgs_msg_dds__LaserEcho___copyIn(c_base base,
                    sensor_msgs::msg::dds_::LaserEcho_ *From,
                    struct _sensor_msgs_msg_dds__LaserEcho_ *To);

                result = __sensor_msgs_msg_dds__LaserEcho___copyIn(base, &(*src)[i0], (struct _sensor_msgs_msg_dds__LaserEcho_ *)&dest0[i0]);
            }
        }
        to->intensities_ = (c_sequence)dest0;
#else
        dest0 = (struct _sensor_msgs_msg_dds__LaserEcho_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
                extern c_bool __sensor_msgs_msg_dds__LaserEcho___copyIn(c_base base,
                    sensor_msgs::msg::dds_::LaserEcho_ *From,
                    struct _sensor_msgs_msg_dds__LaserEcho_ *To);

                result = __sensor_msgs_msg_dds__LaserEcho___copyIn(base, &(*src)[i0], (struct _sensor_msgs_msg_dds__LaserEcho_ *)&dest0[i0]);
            }
        }
        to->intensities_ = (c_sequence)dest0;
#endif
    }
    return result;
}

void
__sensor_msgs_msg_dds__MultiEchoLaserScan___copyOut(
    void *_from,
    void *_to)
{
    struct _sensor_msgs_msg_dds__MultiEchoLaserScan_ *from = (struct _sensor_msgs_msg_dds__MultiEchoLaserScan_ *)_from;
    struct ::sensor_msgs::msg::dds_::MultiEchoLaserScan_ *to = (struct ::sensor_msgs::msg::dds_::MultiEchoLaserScan_ *)_to;
    {
        extern void __std_msgs_msg_dds__Header___copyOut(void *, void *);
        __std_msgs_msg_dds__Header___copyOut((void *)&from->header_, (void *)&to->header_);
    }
    to->angle_min_ = (::DDS::Float)from->angle_min_;
    to->angle_max_ = (::DDS::Float)from->angle_max_;
    to->angle_increment_ = (::DDS::Float)from->angle_increment_;
    to->time_increment_ = (::DDS::Float)from->time_increment_;
    to->scan_time_ = (::DDS::Float)from->scan_time_;
    to->range_min_ = (::DDS::Float)from->range_min_;
    to->range_max_ = (::DDS::Float)from->range_max_;
    {
        long size0;
        struct _sensor_msgs_msg_dds__LaserEcho_ *src0 = (struct _sensor_msgs_msg_dds__LaserEcho_ *)from->ranges_;
        ::sensor_msgs::msg::dds_::MultiEchoLaserScan_::_ranges__seq *dst = &to->ranges_;

        size0 = c_arraySize(c_sequence(from->ranges_));
        to->ranges_.length(size0);
        {
            long i0;
            for (i0 = 0; i0 < size0; i0++) {
                extern void __sensor_msgs_msg_dds__LaserEcho___copyOut(void *from, void *to);
                __sensor_msgs_msg_dds__LaserEcho___copyOut((void *)&src0[i0], (void *)&(*dst)[i0]);
            }
        }
    }
    {
        long size0;
        struct _sensor_msgs_msg_dds__LaserEcho_ *src0 = (struct _sensor_msgs_msg_dds__LaserEcho_ *)from->intensities_;
        ::sensor_msgs::msg::dds_::MultiEchoLaserScan_::_intensities__seq *dst = &to->intensities_;

        size0 = c_arraySize(c_sequence(from->intensities_));
        to->intensities_.length(size0);
        {
            long i0;
            for (i0 = 0; i0 < size0; i0++) {
                extern void __sensor_msgs_msg_dds__LaserEcho___copyOut(void *from, void *to);
                __sensor_msgs_msg_dds__LaserEcho___copyOut((void *)&src0[i0], (void *)&(*dst)[i0]);
            }
        }
    }
}

