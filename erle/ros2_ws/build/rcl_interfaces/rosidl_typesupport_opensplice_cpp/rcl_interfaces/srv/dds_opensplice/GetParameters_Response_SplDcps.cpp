#include "GetParameters_Response_SplDcps.h"
#include "ccpp_GetParameters_Response_.h"
#include "dds_type_aliases.h"

const char *
__rcl_interfaces_srv_dds__GetParameters_Response___name(void)
{
    return (const char*)"rcl_interfaces::srv::dds_::GetParameters_Response_";
}

const char *
__rcl_interfaces_srv_dds__GetParameters_Response___keys(void)
{
    return (const char*)"";
}

#include <v_kernel.h>
#include <v_topic.h>
#include <os_stdlib.h>
#include <string.h>
#include <os_report.h>

c_bool
__rcl_interfaces_srv_dds__GetParameters_Response___copyIn(
    c_base base,
    struct ::rcl_interfaces::srv::dds_::GetParameters_Response_ *from,
    struct _rcl_interfaces_srv_dds__GetParameters_Response_ *to)
{
    c_bool result = OS_C_TRUE;
    (void) base;

    {
/* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 774 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        struct _rcl_interfaces_msg_dds__ParameterValue_ *dest0;
        ::rcl_interfaces::srv::dds_::GetParameters_Response_::_values__seq *src = &from->values_;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "rcl_interfaces::msg::dds_::ParameterValue_"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<rcl_interfaces::msg::dds_::ParameterValue_>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (struct _rcl_interfaces_msg_dds__ParameterValue_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
                extern c_bool __rcl_interfaces_msg_dds__ParameterValue___copyIn(c_base base,
                    rcl_interfaces::msg::dds_::ParameterValue_ *From,
                    struct _rcl_interfaces_msg_dds__ParameterValue_ *To);

                result = __rcl_interfaces_msg_dds__ParameterValue___copyIn(base, &(*src)[i0], (struct _rcl_interfaces_msg_dds__ParameterValue_ *)&dest0[i0]);
            }
        }
        to->values_ = (c_sequence)dest0;
#else
        dest0 = (struct _rcl_interfaces_msg_dds__ParameterValue_ *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/erle/opensplice/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
                extern c_bool __rcl_interfaces_msg_dds__ParameterValue___copyIn(c_base base,
                    rcl_interfaces::msg::dds_::ParameterValue_ *From,
                    struct _rcl_interfaces_msg_dds__ParameterValue_ *To);

                result = __rcl_interfaces_msg_dds__ParameterValue___copyIn(base, &(*src)[i0], (struct _rcl_interfaces_msg_dds__ParameterValue_ *)&dest0[i0]);
            }
        }
        to->values_ = (c_sequence)dest0;
#endif
    }
    return result;
}

void
__rcl_interfaces_srv_dds__GetParameters_Response___copyOut(
    void *_from,
    void *_to)
{
    struct _rcl_interfaces_srv_dds__GetParameters_Response_ *from = (struct _rcl_interfaces_srv_dds__GetParameters_Response_ *)_from;
    struct ::rcl_interfaces::srv::dds_::GetParameters_Response_ *to = (struct ::rcl_interfaces::srv::dds_::GetParameters_Response_ *)_to;
    {
        long size0;
        struct _rcl_interfaces_msg_dds__ParameterValue_ *src0 = (struct _rcl_interfaces_msg_dds__ParameterValue_ *)from->values_;
        ::rcl_interfaces::srv::dds_::GetParameters_Response_::_values__seq *dst = &to->values_;

        size0 = c_arraySize(c_sequence(from->values_));
        to->values_.length(size0);
        {
            long i0;
            for (i0 = 0; i0 < size0; i0++) {
                extern void __rcl_interfaces_msg_dds__ParameterValue___copyOut(void *from, void *to);
                __rcl_interfaces_msg_dds__ParameterValue___copyOut((void *)&src0[i0], (void *)&(*dst)[i0]);
            }
        }
    }
}

