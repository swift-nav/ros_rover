"""autogenerated by genpy from crab_msgs/GetLegIKSolverRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import crab_msgs.msg

class GetLegIKSolverRequest(genpy.Message):
  _md5sum = "e6a55288c7d97cc56bf3e73bfc7d5d02"
  _type = "crab_msgs/GetLegIKSolverRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32[] leg_number
crab_msgs/LegJointsState[] current_joints
crab_msgs/LegPositionState[] target_position


================================================================================
MSG: crab_msgs/LegJointsState
float64[3] joint

================================================================================
MSG: crab_msgs/LegPositionState
float64 x
float64 y
float64 z

"""
  __slots__ = ['leg_number','current_joints','target_position']
  _slot_types = ['int32[]','crab_msgs/LegJointsState[]','crab_msgs/LegPositionState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leg_number,current_joints,target_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetLegIKSolverRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.leg_number is None:
        self.leg_number = []
      if self.current_joints is None:
        self.current_joints = []
      if self.target_position is None:
        self.target_position = []
    else:
      self.leg_number = []
      self.current_joints = []
      self.target_position = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.leg_number)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.leg_number))
      length = len(self.current_joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.current_joints:
        buff.write(_struct_3d.pack(*val1.joint))
      length = len(self.target_position)
      buff.write(_struct_I.pack(length))
      for val1 in self.target_position:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.current_joints is None:
        self.current_joints = None
      if self.target_position is None:
        self.target_position = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.leg_number = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current_joints = []
      for i in range(0, length):
        val1 = crab_msgs.msg.LegJointsState()
        start = end
        end += 24
        val1.joint = _struct_3d.unpack(str[start:end])
        self.current_joints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target_position = []
      for i in range(0, length):
        val1 = crab_msgs.msg.LegPositionState()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.target_position.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.leg_number)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.leg_number.tostring())
      length = len(self.current_joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.current_joints:
        buff.write(val1.joint.tostring())
      length = len(self.target_position)
      buff.write(_struct_I.pack(length))
      for val1 in self.target_position:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.current_joints is None:
        self.current_joints = None
      if self.target_position is None:
        self.target_position = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.leg_number = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current_joints = []
      for i in range(0, length):
        val1 = crab_msgs.msg.LegJointsState()
        start = end
        end += 24
        val1.joint = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        self.current_joints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target_position = []
      for i in range(0, length):
        val1 = crab_msgs.msg.LegPositionState()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.target_position.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from crab_msgs/GetLegIKSolverResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import crab_msgs.msg

class GetLegIKSolverResponse(genpy.Message):
  _md5sum = "785ad427ec459cc9764f9f826c9ded18"
  _type = "crab_msgs/GetLegIKSolverResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """crab_msgs/LegJointsState[] target_joints
int32 error_codes

int32 IK_FOUND=1
int32 IK_NOT_FOUND=-1
int32 TIMED_OUT=-2


================================================================================
MSG: crab_msgs/LegJointsState
float64[3] joint

"""
  # Pseudo-constants
  IK_FOUND = 1
  IK_NOT_FOUND = -1
  TIMED_OUT = -2

  __slots__ = ['target_joints','error_codes']
  _slot_types = ['crab_msgs/LegJointsState[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_joints,error_codes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetLegIKSolverResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.target_joints is None:
        self.target_joints = []
      if self.error_codes is None:
        self.error_codes = 0
    else:
      self.target_joints = []
      self.error_codes = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.target_joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.target_joints:
        buff.write(_struct_3d.pack(*val1.joint))
      buff.write(_struct_i.pack(self.error_codes))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.target_joints is None:
        self.target_joints = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target_joints = []
      for i in range(0, length):
        val1 = crab_msgs.msg.LegJointsState()
        start = end
        end += 24
        val1.joint = _struct_3d.unpack(str[start:end])
        self.target_joints.append(val1)
      start = end
      end += 4
      (self.error_codes,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.target_joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.target_joints:
        buff.write(val1.joint.tostring())
      buff.write(_struct_i.pack(self.error_codes))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.target_joints is None:
        self.target_joints = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target_joints = []
      for i in range(0, length):
        val1 = crab_msgs.msg.LegJointsState()
        start = end
        end += 24
        val1.joint = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        self.target_joints.append(val1)
      start = end
      end += 4
      (self.error_codes,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_3d = struct.Struct("<3d")
class GetLegIKSolver(object):
  _type          = 'crab_msgs/GetLegIKSolver'
  _md5sum = 'aab6d4778f2d7a09001d31408c116ed3'
  _request_class  = GetLegIKSolverRequest
  _response_class = GetLegIKSolverResponse
