// Generated by gencpp from file crab_msgs/GaitCommand.msg
// DO NOT EDIT!


#ifndef CRAB_MSGS_MESSAGE_GAITCOMMAND_H
#define CRAB_MSGS_MESSAGE_GAITCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace crab_msgs
{
template <class ContainerAllocator>
struct GaitCommand_
{
  typedef GaitCommand_<ContainerAllocator> Type;

  GaitCommand_()
    : cmd(0)
    , fi(0.0)
    , velocity(0.0)
    , alpha(0.0)
    , scale(0.0)  {
    }
  GaitCommand_(const ContainerAllocator& _alloc)
    : cmd(0)
    , fi(0.0)
    , velocity(0.0)
    , alpha(0.0)
    , scale(0.0)  {
    }



   typedef int32_t _cmd_type;
  _cmd_type cmd;

   typedef double _fi_type;
  _fi_type fi;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _alpha_type;
  _alpha_type alpha;

   typedef double _scale_type;
  _scale_type scale;


    enum { RUNRIPPLE = 1 };
     enum { RUNTRIPOD = 2 };
     enum { STOP = 3 };
     enum { PAUSE = 4 };
 

  typedef boost::shared_ptr< ::crab_msgs::GaitCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crab_msgs::GaitCommand_<ContainerAllocator> const> ConstPtr;

}; // struct GaitCommand_

typedef ::crab_msgs::GaitCommand_<std::allocator<void> > GaitCommand;

typedef boost::shared_ptr< ::crab_msgs::GaitCommand > GaitCommandPtr;
typedef boost::shared_ptr< ::crab_msgs::GaitCommand const> GaitCommandConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crab_msgs::GaitCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crab_msgs::GaitCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace crab_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/erle/ros_catkin_ws/install_isolated/share/std_msgs/cmake/../msg'], 'crab_msgs': ['/home/erle/spider_ws/src/crab_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::crab_msgs::GaitCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crab_msgs::GaitCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crab_msgs::GaitCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crab_msgs::GaitCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crab_msgs::GaitCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crab_msgs::GaitCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crab_msgs::GaitCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47aecd62b438a8407fd0203311383fc4";
  }

  static const char* value(const ::crab_msgs::GaitCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47aecd62b438a840ULL;
  static const uint64_t static_value2 = 0x7fd0203311383fc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::crab_msgs::GaitCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crab_msgs/GaitCommand";
  }

  static const char* value(const ::crab_msgs::GaitCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crab_msgs::GaitCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 cmd\n\
float64 fi\n\
float64 velocity\n\
float64 alpha\n\
float64 scale\n\
\n\
int32 RUNRIPPLE=1\n\
int32 RUNTRIPOD=2\n\
int32 STOP=3\n\
int32 PAUSE=4\n\
";
  }

  static const char* value(const ::crab_msgs::GaitCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crab_msgs::GaitCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.fi);
      stream.next(m.velocity);
      stream.next(m.alpha);
      stream.next(m.scale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GaitCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crab_msgs::GaitCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crab_msgs::GaitCommand_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "fi: ";
    Printer<double>::stream(s, indent + "  ", v.fi);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "alpha: ";
    Printer<double>::stream(s, indent + "  ", v.alpha);
    s << indent << "scale: ";
    Printer<double>::stream(s, indent + "  ", v.scale);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRAB_MSGS_MESSAGE_GAITCOMMAND_H
