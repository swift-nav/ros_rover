"""autogenerated by genpy from crab_msgs/LegIKRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import crab_msgs.msg

class LegIKRequest(genpy.Message):
  _md5sum = "bcb4917a6750a0f98ecbb5e98212cbec"
  _type = "crab_msgs/LegIKRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 leg_number
crab_msgs/LegJointsState current_joints
crab_msgs/LegPositionState target_position

================================================================================
MSG: crab_msgs/LegJointsState
float64[3] joint

================================================================================
MSG: crab_msgs/LegPositionState
float64 x
float64 y
float64 z

"""
  __slots__ = ['leg_number','current_joints','target_position']
  _slot_types = ['int32','crab_msgs/LegJointsState','crab_msgs/LegPositionState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leg_number,current_joints,target_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LegIKRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.leg_number is None:
        self.leg_number = 0
      if self.current_joints is None:
        self.current_joints = crab_msgs.msg.LegJointsState()
      if self.target_position is None:
        self.target_position = crab_msgs.msg.LegPositionState()
    else:
      self.leg_number = 0
      self.current_joints = crab_msgs.msg.LegJointsState()
      self.target_position = crab_msgs.msg.LegPositionState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.leg_number))
      buff.write(_struct_3d.pack(*self.current_joints.joint))
      _x = self
      buff.write(_struct_3d.pack(_x.target_position.x, _x.target_position.y, _x.target_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.current_joints is None:
        self.current_joints = crab_msgs.msg.LegJointsState()
      if self.target_position is None:
        self.target_position = crab_msgs.msg.LegPositionState()
      end = 0
      start = end
      end += 4
      (self.leg_number,) = _struct_i.unpack(str[start:end])
      start = end
      end += 24
      self.current_joints.joint = _struct_3d.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.target_position.x, _x.target_position.y, _x.target_position.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.leg_number))
      buff.write(self.current_joints.joint.tostring())
      _x = self
      buff.write(_struct_3d.pack(_x.target_position.x, _x.target_position.y, _x.target_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.current_joints is None:
        self.current_joints = crab_msgs.msg.LegJointsState()
      if self.target_position is None:
        self.target_position = crab_msgs.msg.LegPositionState()
      end = 0
      start = end
      end += 4
      (self.leg_number,) = _struct_i.unpack(str[start:end])
      start = end
      end += 24
      self.current_joints.joint = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 24
      (_x.target_position.x, _x.target_position.y, _x.target_position.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_3d = struct.Struct("<3d")
